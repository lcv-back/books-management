[{
        "question": "Discovery Server trong hệ thống microservices thường được sử dụng để làm gì?",
        "answers": ["Quản lý cấu hình ứng dụng", "Lưu trữ dữ liệu", "Đăng ký và cung cấp thông tin vị trí của các dịch vụ", "Tăng tốc độ xử lý dữ liệu"],
        "correctIndex": 2,
        "explanation": "Discovery Server là một phần quan trọng trong hệ thống microservices, được sử dụng để đăng ký và lưu trữ thông tin về vị trí (URL) của các dịch vụ, giúp các dịch vụ khác tìm kiếm nhau dễ dàng."
    },
    {
        "question": "Eureka là một ví dụ phổ biến của loại công cụ nào?",
        "answers": ["Message Broker", "Discovery Server", "Load Balancer", "Database"],
        "correctIndex": 1,
        "explanation": "Eureka, được phát triển bởi Netflix, là một Discovery Server phổ biến, cho phép các dịch vụ trong hệ thống microservices đăng ký và phát hiện lẫn nhau."
    },
    {
        "question": "Discovery Client thường thực hiện tác vụ nào trong hệ thống?",
        "answers": ["Tự động đăng ký vào Discovery Server", "Quản lý truy vấn cơ sở dữ liệu", "Tạo giao diện người dùng", "Điều phối quy trình nghiệp vụ"],
        "correctIndex": 0,
        "explanation": "Discovery Client là các dịch vụ microservices tự động đăng ký vào Discovery Server để cho phép các dịch vụ khác tìm thấy chúng thông qua Discovery Server."
    },
    {
        "question": "Khi một Discovery Server sử dụng cơ chế heartbeat, mục đích chính của nó là gì?",
        "answers": ["Kiểm tra trạng thái hoạt động của các dịch vụ đã đăng ký", "Cải thiện hiệu suất truy vấn", "Tăng bảo mật hệ thống", "Lưu trữ dữ liệu dịch vụ lâu dài"],
        "correctIndex": 0,
        "explanation": "Heartbeat là một cơ chế mà Discovery Server sử dụng để kiểm tra trạng thái hoạt động của các dịch vụ đã đăng ký nhằm đảm bảo thông tin trong registry luôn chính xác và cập nhật."
    },
    {
        "question": "Discovery Server và Discovery Client chủ yếu sử dụng giao thức nào để giao tiếp?",
        "answers": ["HTTP/HTTPS", "FTP", "SSH", "SMTP"],
        "correctIndex": 0,
        "explanation": "Discovery Server và Discovery Client thường giao tiếp qua giao thức HTTP hoặc HTTPS để đăng ký và truy xuất thông tin về các dịch vụ."
    },
    {
        "question": "Trong Eureka, thuật ngữ 'Lease Expiry' đề cập đến điều gì?",
        "answers": ["Thời gian một dịch vụ bị xóa khỏi registry nếu không gửi heartbeat", "Thời gian cần để một dịch vụ đăng ký", "Khoảng thời gian để cập nhật cấu hình", "Thời gian cần để gửi yêu cầu tìm kiếm dịch vụ"],
        "correctIndex": 0,
        "explanation": "Lease Expiry là thời gian một dịch vụ sẽ bị xóa khỏi Eureka registry nếu không gửi heartbeat trong khoảng thời gian quy định, giúp giữ registry luôn cập nhật."
    },
    {
        "question": "Khi Discovery Server không khả dụng, vấn đề gì có thể xảy ra?",
        "answers": ["Các dịch vụ không thể tìm thấy nhau", "Tất cả dịch vụ sẽ dừng hoạt động", "Hệ thống sẽ mất toàn bộ dữ liệu", "Load Balancer sẽ ngừng hoạt động"],
        "correctIndex": 0,
        "explanation": "Nếu Discovery Server không khả dụng, các dịch vụ sẽ không thể tìm thấy nhau, dẫn đến các lỗi kết nối trong hệ thống."
    },
    {
        "question": "Load Balancer hoạt động như thế nào khi tích hợp với Discovery Server?",
        "answers": ["Tìm kiếm và phân phối yêu cầu đến các dịch vụ dựa trên thông tin từ Discovery Server", "Thực hiện tất cả các yêu cầu tới cơ sở dữ liệu", "Tăng hiệu suất xử lý dữ liệu", "Tạo API Gateway"],
        "correctIndex": 0,
        "explanation": "Load Balancer sử dụng thông tin từ Discovery Server để phân phối yêu cầu đến các dịch vụ có sẵn, giúp hệ thống cân bằng tải và tối ưu hóa hiệu suất."
    },
    {
        "question": "Lợi ích chính của việc sử dụng Discovery Server trong hệ thống microservices là gì?",
        "answers": ["Tăng tính linh hoạt và khả năng mở rộng của hệ thống", "Giảm số lượng dịch vụ cần thiết", "Tăng tốc độ truy vấn cơ sở dữ liệu", "Tối ưu hóa giao diện người dùng"],
        "correctIndex": 0,
        "explanation": "Discovery Server tăng tính linh hoạt và khả năng mở rộng của hệ thống microservices bằng cách tự động quản lý việc tìm kiếm và kết nối giữa các dịch vụ."
    },
    {
        "question": "Khi nào cần sử dụng Discovery Server với kiến trúc microservices?",
        "answers": ["Khi có nhiều dịch vụ cần giao tiếp với nhau", "Khi chỉ có một dịch vụ duy nhất", "Khi không có nhu cầu mở rộng hệ thống", "Khi sử dụng kiến trúc monolithic"],
        "correctIndex": 0,
        "explanation": "Discovery Server rất cần thiết trong kiến trúc microservices khi có nhiều dịch vụ cần giao tiếp và tìm kiếm lẫn nhau một cách tự động và hiệu quả."
    }, {
        "question": "Discovery Server có thể được triển khai như thế nào để đảm bảo tính sẵn sàng cao?",
        "answers": ["Thiết lập nhiều bản sao của Discovery Server", "Lưu trữ thông tin dịch vụ trong cơ sở dữ liệu", "Chạy trên một máy chủ duy nhất", "Sử dụng FTP để chia sẻ thông tin"],
        "correctIndex": 0,
        "explanation": "Để đảm bảo tính sẵn sàng cao, nhiều bản sao của Discovery Server có thể được triển khai trong một cụm (cluster), giúp hệ thống hoạt động liên tục ngay cả khi một bản sao bị lỗi."
    },
    {
        "question": "Thông tin nào thường được lưu trữ trong Discovery Server?",
        "answers": ["Tên dịch vụ, địa chỉ URL, trạng thái", "Dữ liệu người dùng", "Cấu hình giao diện người dùng", "Lịch sử truy vấn"],
        "correctIndex": 0,
        "explanation": "Discovery Server lưu trữ thông tin cần thiết để các dịch vụ có thể tìm kiếm và giao tiếp với nhau, bao gồm tên dịch vụ, địa chỉ URL và trạng thái hoạt động."
    },
    {
        "question": "Lợi ích chính của việc sử dụng client-side load balancing với Discovery Client là gì?",
        "answers": ["Phân phối tải trực tiếp từ phía client dựa trên danh sách dịch vụ từ Discovery Server", "Giảm chi phí lưu trữ dữ liệu", "Loại bỏ nhu cầu sử dụng Discovery Server", "Tăng khả năng giao tiếp với cơ sở dữ liệu"],
        "correctIndex": 0,
        "explanation": "Client-side load balancing cho phép client tự phân phối tải dựa trên danh sách các dịch vụ từ Discovery Server, giúp giảm bớt áp lực cho máy chủ."
    },
    {
        "question": "Spring Cloud Eureka hỗ trợ chế độ nào để tối ưu hóa hiệu suất của Discovery Server?",
        "answers": ["Peer-to-Peer Replication", "Primary-Backup Model", "Direct Database Synchronization", "Single-Node Only"],
        "correctIndex": 0,
        "explanation": "Spring Cloud Eureka hỗ trợ Peer-to-Peer Replication, trong đó các bản sao của Discovery Server đồng bộ với nhau, đảm bảo thông tin luôn cập nhật và sẵn sàng."
    },
    {
        "question": "Trong Spring Cloud Eureka, cờ `prefer-ip-address` được sử dụng để làm gì?",
        "answers": ["Ưu tiên sử dụng địa chỉ IP thay vì hostname", "Tăng hiệu suất giao tiếp với cơ sở dữ liệu", "Cho phép các dịch vụ ẩn danh truy cập", "Giảm thời gian heartbeat"],
        "correctIndex": 0,
        "explanation": "Cờ `prefer-ip-address` trong Spring Cloud Eureka được sử dụng để ưu tiên sử dụng địa chỉ IP thay vì hostname, giúp giảm các vấn đề về DNS."
    },
    {
        "question": "Tại sao Discovery Client cần gửi heartbeat đến Discovery Server?",
        "answers": ["Để xác nhận rằng dịch vụ vẫn đang hoạt động", "Để cập nhật giao diện người dùng", "Để giảm lưu lượng truy cập mạng", "Để gửi dữ liệu người dùng"],
        "correctIndex": 0,
        "explanation": "Discovery Client gửi heartbeat đến Discovery Server để xác nhận rằng dịch vụ vẫn đang hoạt động, giúp duy trì danh sách dịch vụ chính xác và cập nhật."
    },
    {
        "question": "Khi Discovery Client không thể tìm thấy dịch vụ, bước nào thường được thực hiện tiếp theo?",
        "answers": ["Truy xuất thông tin từ Discovery Server khác", "Dừng hoạt động dịch vụ", "Xóa dịch vụ khỏi hệ thống", "Lưu trữ thông tin vào cơ sở dữ liệu"],
        "correctIndex": 0,
        "explanation": "Nếu Discovery Client không thể tìm thấy dịch vụ, nó có thể thử truy xuất thông tin từ một Discovery Server khác (nếu có triển khai nhiều bản sao)."
    },
    {
        "question": "API Gateway thường tích hợp với Discovery Server như thế nào?",
        "answers": ["Lấy danh sách dịch vụ từ Discovery Server để định tuyến yêu cầu", "Lưu trữ dữ liệu người dùng", "Xử lý tất cả các dịch vụ ở mức code", "Cập nhật cấu hình dịch vụ tự động"],
        "correctIndex": 0,
        "explanation": "API Gateway tích hợp với Discovery Server để lấy danh sách các dịch vụ hiện có và định tuyến yêu cầu đến dịch vụ phù hợp."
    },
    {
        "question": "Một hạn chế của việc sử dụng Discovery Server là gì?",
        "answers": ["Có thể trở thành điểm nghẽn nếu không được triển khai đúng cách", "Không thể tích hợp với hệ thống hiện có", "Không hỗ trợ client-side load balancing", "Không hỗ trợ microservices"],
        "correctIndex": 0,
        "explanation": "Discovery Server có thể trở thành điểm nghẽn trong hệ thống nếu không được triển khai với tính sẵn sàng cao hoặc không được cấu hình tối ưu."
    },
    {
        "question": "Đâu là cơ chế thay thế nếu Discovery Server không hoạt động?",
        "answers": ["Cache danh sách dịch vụ trên client", "Tắt tất cả các dịch vụ", "Chuyển sang cơ sở dữ liệu quan hệ", "Tăng thời gian heartbeat"],
        "correctIndex": 0,
        "explanation": "Nếu Discovery Server không hoạt động, một cơ chế thay thế phổ biến là cache danh sách dịch vụ trên client, giúp hệ thống tiếp tục hoạt động trong một thời gian nhất định."
    },
    {
        "question": "Discovery Server trong hệ thống microservices thường được cấu hình với thông tin nào?",
        "answers": ["Danh sách các cổng dịch vụ", "Cấu hình kết nối cơ sở dữ liệu", "Đường dẫn URL và metadata của các dịch vụ đã đăng ký", "Thông tin người dùng và mật khẩu"],
        "correctIndex": 2,
        "explanation": "Discovery Server lưu trữ đường dẫn URL và metadata của các dịch vụ đã đăng ký, giúp các dịch vụ khác có thể tìm kiếm và giao tiếp hiệu quả."
    },
    {
        "question": "Spring Cloud Eureka hỗ trợ chế độ nào để các dịch vụ vẫn hoạt động khi Discovery Server không khả dụng?",
        "answers": ["Self-preservation mode", "Fail-fast mode", "Auto-recovery mode", "Heartbeat skipping"],
        "correctIndex": 0,
        "explanation": "Self-preservation mode của Eureka cho phép các dịch vụ tiếp tục hoạt động dựa trên dữ liệu đã được lưu trong bộ nhớ cache, ngay cả khi Discovery Server không khả dụng."
    },
    {
        "question": "Trong Discovery Server, thông tin của dịch vụ không còn gửi heartbeat sẽ xảy ra điều gì?",
        "answers": ["Dịch vụ sẽ bị xóa khỏi registry", "Dịch vụ sẽ chuyển sang trạng thái tạm ngừng", "Dịch vụ sẽ bị tự động khởi động lại", "Dịch vụ sẽ được ưu tiên cập nhật"],
        "correctIndex": 0,
        "explanation": "Nếu một dịch vụ không gửi heartbeat trong thời gian quy định, nó sẽ bị xóa khỏi registry để đảm bảo rằng chỉ các dịch vụ đang hoạt động mới được liệt kê."
    },
    {
        "question": "Discovery Server có thể giúp giảm sự phụ thuộc giữa các dịch vụ bằng cách nào?",
        "answers": ["Cung cấp một cơ chế tìm kiếm dịch vụ trung gian", "Tự động cập nhật cấu hình dịch vụ", "Lưu trữ dữ liệu dịch vụ trong cơ sở dữ liệu", "Tăng hiệu suất giao tiếp qua API"],
        "correctIndex": 0,
        "explanation": "Discovery Server cung cấp một cơ chế tìm kiếm dịch vụ trung gian, giúp các dịch vụ không cần biết trực tiếp vị trí của nhau, từ đó giảm sự phụ thuộc."
    },
    {
        "question": "Trong Spring Cloud Eureka, các dịch vụ thường được đăng ký bằng cách nào?",
        "answers": ["Tự động đăng ký khi ứng dụng khởi động", "Thông qua file cấu hình tĩnh", "Qua kết nối FTP", "Bằng cách gửi email thông báo"],
        "correctIndex": 0,
        "explanation": "Trong Spring Cloud Eureka, các dịch vụ thường được tự động đăng ký vào Discovery Server khi ứng dụng khởi động, dựa trên cấu hình đã được thiết lập."
    },
    {
        "question": "Lợi ích chính của việc sử dụng một cụm Discovery Server là gì?",
        "answers": ["Tăng tính sẵn sàng và khả năng chịu lỗi của hệ thống", "Giảm thời gian khởi động dịch vụ", "Tăng tốc độ xử lý API", "Loại bỏ nhu cầu sử dụng cơ sở dữ liệu"],
        "correctIndex": 0,
        "explanation": "Triển khai một cụm Discovery Server giúp tăng tính sẵn sàng và khả năng chịu lỗi của hệ thống, đảm bảo các dịch vụ vẫn có thể tìm thấy nhau ngay cả khi một hoặc nhiều nút trong cụm gặp sự cố."
    },
    {
        "question": "Tại sao caching lại quan trọng trong Discovery Client?",
        "answers": ["Để giảm tải cho Discovery Server", "Để tăng thời gian phản hồi của cơ sở dữ liệu", "Để lưu trữ dữ liệu người dùng", "Để quản lý heartbeat hiệu quả hơn"],
        "correctIndex": 0,
        "explanation": "Caching cho phép Discovery Client lưu trữ thông tin dịch vụ cục bộ, giảm số lượng yêu cầu tới Discovery Server và cải thiện hiệu năng hệ thống."
    },
    {
        "question": "Trong hệ thống sử dụng Discovery Server, làm thế nào để phát hiện một dịch vụ bị lỗi?",
        "answers": ["Dựa vào việc không nhận được heartbeat từ dịch vụ đó", "Dựa vào thông tin từ cơ sở dữ liệu", "Dựa vào giao diện người dùng", "Dựa vào cấu hình tĩnh"],
        "correctIndex": 0,
        "explanation": "Discovery Server sử dụng cơ chế heartbeat để phát hiện trạng thái của các dịch vụ. Nếu không nhận được heartbeat trong khoảng thời gian quy định, dịch vụ đó sẽ được coi là không khả dụng."
    },
    {
        "question": "Sử dụng Spring Cloud Ribbon cùng với Discovery Server mang lại lợi ích gì?",
        "answers": ["Cung cấp client-side load balancing", "Tăng khả năng tương thích với các hệ thống khác", "Tự động khởi động lại các dịch vụ không khả dụng", "Loại bỏ sự cần thiết của API Gateway"],
        "correctIndex": 0,
        "explanation": "Spring Cloud Ribbon tích hợp với Discovery Server để cung cấp cơ chế client-side load balancing, giúp phân phối yêu cầu giữa các instance của dịch vụ một cách hiệu quả."
    },
    {
        "question": "Trong hệ thống microservices, thông tin của dịch vụ được cập nhật trong Discovery Server thông qua cơ chế nào?",
        "answers": ["Heartbeat và cập nhật metadata", "Lưu trữ vào cơ sở dữ liệu", "Tự động đồng bộ hóa qua FTP", "Gửi thông báo qua email"],
        "correctIndex": 0,
        "explanation": "Discovery Server sử dụng cơ chế heartbeat và cập nhật metadata để đảm bảo thông tin dịch vụ luôn chính xác và cập nhật trong hệ thống."
    }

]